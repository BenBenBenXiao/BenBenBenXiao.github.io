<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猪窠</title>
  
  <subtitle>雷霆雨露，具是天恩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-18T11:36:38.062Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李彦辰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TensorFlow2.0环境搭建</title>
    <link href="http://yoursite.com/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/</id>
    <published>2020-02-18T10:31:57.000Z</published>
    <updated>2020-02-18T11:36:38.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Tensorflow推出了2.0版本，而且自己的Machine Learning课程也会用到Keras（现在已经集成到TensorFlow中），再加上自己的笔记本电脑坏掉了，所以就必须在家里的Windows平台上装一下Tensorflow。正好在这个过程中踩了不上坑，特意记录一下。注意这里是GPU版本的安装。如果安装CPU版本那么直接使用pip或者conda安装就好，基本命令和流程都相同。</p><a id="more"></a><h1 id="Anaconda的安装"><a href="#Anaconda的安装" class="headerlink" title="Anaconda的安装"></a>Anaconda的安装</h1><p>Anaconda大家都不会陌生。Windows安装一路next就可以了，没什么细说的。让我最高兴的是Windows最新的发行版集成了Terminal这就更好用了，Linux命令无缝衔接。exe文件一定要到官网下载，因为是最新的。下载速度慢的话就用离线下载软件弄一下得了。千万不要去清华源下载安装文件！都太老了。</p><h1 id="安装Tensorflow"><a href="#安装Tensorflow" class="headerlink" title="安装Tensorflow"></a>安装Tensorflow</h1><p>CPU版本的超级好安装，所以这里只说GPU版本的。我用Linux配置过MXNet的GPU版本，CUDA和cuDNN超级麻烦，但是Tensorflow直接用conda就可以一键配置好，还是很方便的。所以Tensorflow-gpu的安装就是通过conda这个package管理工具进行的。</p><h2 id="conda的使用"><a href="#conda的使用" class="headerlink" title="conda的使用"></a>conda的使用</h2><p>通过Anaconda安装好Python之后就自带conda了，所以只需要在“开始”菜单中打开powershell就可以使用conda了。</p><p><img src="/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/powershell.PNG" alt="powershell"><br>这就是自带的powershell了，超级好用。</p><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>创建虚拟环境是个很好的习惯，这样跨平台就很方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n [虚拟环境名称] # 创建虚拟环境</span><br></pre></td></tr></table></figure><p>创建虚拟环境之后需要激活才能使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate [虚拟环境名称] # 激活虚拟环境</span><br></pre></td></tr></table></figure><p>激活之后就会进入创建的虚拟环境。由于之前已经存在一个base环境，所以我们有时候需要查看虚拟环境的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list # 列出所有conda建立的虚拟环境</span><br></pre></td></tr></table></figure><p>如果我们想退出这个虚拟环境呢？一种方法是直接关掉窗口，另一种是使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate [虚拟环境名称] # 退出虚拟环境</span><br></pre></td></tr></table></figure><h2 id="切换源"><a href="#切换源" class="headerlink" title="切换源"></a>切换源</h2><p>虚拟环境已经建好了，接下来就是安装了。但是如果直接通过默认的源安装，得等到猴年马月才会安装好。所以首先就是切换源。</p><ol><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华源</a></li><li><a href="https://mirrors.sjtug.sjtu.edu.cn/#/" target="_blank" rel="noopener">上海交大</a></li></ol><p>具体如何操作页面内都有帮助，照着做就好了。一般这里都不会出现什么问题。两个源选择哪一个都可以，不过选择清华源的人多一些，跟着大家的步伐走总是没有错的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="conda-install"><a href="#conda-install" class="headerlink" title="conda install"></a>conda install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda search tensorflow-gpu # 查找Tensorflow GPU版本</span><br><span class="line">conda install tensorflow-gpu # 安装Tensorflow GPU版本</span><br><span class="line">conda search tensorflow # 查找Tensorflow CPU版本</span><br><span class="line">conda install tensorflow # 安装Tensorflow CPU版本</span><br></pre></td></tr></table></figure><p>conda search 的截图</p><p><img src="/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/conda_search.PNG" alt="conda search"><br>conda install 的截图</p><p><img src="/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/conda_install1.PNG" alt="conda install"><br><img src="/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/conda_install2.PNG" alt="conda install"></p><p>在安装之前最好先search一下看看有没有相关包的相关版本。如果没有的话再切换其他源。如果安装错误再卸载就很麻烦。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>如果已经有相关安装好的配置文件，那么就可以一条命令直接部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda env creat -f [配置文件名] # 使用配置文件部署</span><br><span class="line">conda env export &gt; [配置文件名] # 导出配置文件</span><br></pre></td></tr></table></figure><p>第二条是虚拟环境导出配置文件，买一赠一。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>安装好了之后应该测试一下，进入虚拟环境之后就可以进入python命令行模式开始测试了。</p><p><img src="/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/test.PNG" alt></p><h2 id="notebook虚拟环境切换"><a href="#notebook虚拟环境切换" class="headerlink" title="notebook虚拟环境切换"></a>notebook虚拟环境切换</h2><p>安装好了之后的问题就是在notebook中用不了，你说着急不着急。但是问题也好解决，只需要一个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install ipykernel # 安装插件ipykernel</span><br></pre></td></tr></table></figure><p>点击<a href="https://github.com/ipython/ipykernel" target="_blank" rel="noopener">ipykernel</a>进入Github介绍。</p><p>安装玩插件之后就可以开心地使用了，在new的时候就可以选择kernel了。</p><p><img src="/2020/02/18/tensorflow2.0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88GPU%E7%89%88%E6%9C%AC%EF%BC%89/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2.PNG" alt="虚拟环境切换"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>到这里也基本结束了。如果对您有帮助，节省了您的时间，欢迎赞赏～您的赞赏支持我写出更多原创的高质量文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Tensorflow推出了2.0版本，而且自己的Machine Learning课程也会用到Keras（现在已经集成到TensorFlow中），再加上自己的笔记本电脑坏掉了，所以就必须在家里的Windows平台上装一下Tensorflow。正好在这个过程中踩了不上坑，特意记录一下。注意这里是GPU版本的安装。如果安装CPU版本那么直接使用pip或者conda安装就好，基本命令和流程都相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
      <category term="Deployment" scheme="http://yoursite.com/tags/Deployment/"/>
    
      <category term="TensorFlow 2.0" scheme="http://yoursite.com/tags/TensorFlow-2-0/"/>
    
      <category term="MachineLearning" scheme="http://yoursite.com/tags/MachineLearning/"/>
    
      <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>Git基本操作命令</title>
    <link href="http://yoursite.com/2020/02/18/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/02/18/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-18T10:27:51.000Z</published>
    <updated>2020-02-18T10:29:37.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git是一个版本控制脚本，基本命令和Linux中有很多都是重复的，至少逻辑上是这样。我这个半吊子Linux用户用起来很享受，尤其是用git clone源码，超级快。所以就做一个基本的介绍。只介绍干货，开箱即用。当然，会介绍一些Linux的相关命令。这样只看这篇介绍也可以知道git是怎么运行的。更多的内容可以参看Linux常用命令和Git的文档。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Windows用户直接到官网找可执行文件安装，一路next。默认设置最好不要更改。在编辑器哪里选择自己会用的，有vscode，推荐这个。而Windows的cmd，除非自己特别熟悉，否则想都不要想cmd。当然，现在的Windows也集成了终端，也可以用。由于我手中的Windows没更新到集成终端的版本，所以就没做测试。但是我估计也可以用。</p><p>Linux大部分都预装了Git，直接用就好。<br>PS：所有的常用命令行都可以用Linux终端中的命令，所以掌握一些没有什么坏处。</p><h1 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h1><p>从本质上来说，Git是个版本控制脚本，控制的仓库是本地仓库。当然也可以通过相关的命令把本地的同步到服务器，无论服务器是局域网内的还是诸如Github，Gitee，GitLab之类的仓库。一般GitLab都部署在局域网内。</p><p>Git结构有三个部分，本地仓库，缓存区，工作区，通常还有远程仓库。</p><ol><li>本地仓库：这个就和Hexo写的博客一样，所有的内容都在本地的文件夹内。通过部署，我们就可以把本地仓库的内容提交到远程仓库。</li><li>缓存区：最先接受工作区内容的地方。如果通过审核，就可以把缓存区的内容提交到本地仓库。如果没有通过，就可以删除。</li><li>工作区:可以理解为写代码的地方。</li></ol><p>如果和一个工厂生产类比起来就很好理解。首先在车间生产产品，这个车间就是工作区。产品生产出来之后，送到质检员处接受检查。质检员的临时仓库就是缓存区。通过质检员的检查之后就可以把产品放入本地仓库。通过物流，就可以把货物配送给各个商场。这里的商场就是远程仓库。</p><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p>在需要查找命令或者帮助的时候，可以在终端内输入git，就会有相关的介绍或者帮助。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在我们需要使用Git的文件夹里，打开终端，使用下面的命令初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init # 初始化</span><br></pre></td></tr></table></figure><h2 id="添加信息戳"><a href="#添加信息戳" class="headerlink" title="添加信息戳"></a>添加信息戳</h2><p>这个信息戳就是个人的一个信息，在每次提交的时候都会知道是谁提交的，所以这个信息戳很有用。基本的命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config # 添加配置</span><br></pre></td></tr></table></figure><p>PS：信息戳至少有一个</p><h3 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h3><p>局部就是在这个电脑上可以有多个，每个用户都用自己的信息戳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name 名字 # 设置用户名</span><br><span class="line">git config user.email 邮箱 # 设置邮箱</span><br></pre></td></tr></table></figure><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>全局就是给这个电脑设置一个默认的信息戳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 名字 # 设置用户名</span><br><span class="line">git config --global user.email 邮箱 # 设置邮箱</span><br></pre></td></tr></table></figure><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p>####　局部<br>相关的配置文件在.git文件夹内。假设我们已经在Git所在的文件夹内，可以使用如下命令查看相关的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat .git&#x2F;config # 查看局部配置</span><br></pre></td></tr></table></figure><h4 id="全局-1"><a href="#全局-1" class="headerlink" title="全局"></a>全局</h4><p>配置文件在~目录下，可以用如下命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.gitconfig # 查看全局配置</span><br></pre></td></tr></table></figure><h4 id="Linux相关命令"><a href="#Linux相关命令" class="headerlink" title="Linux相关命令"></a>Linux相关命令</h4><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p>cat在Linux中常用，可以在终端中查看文本的内容。文本内容短的比较合适。假如在 ~/Documents 中有hello.txt，就可以用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [路径] [文件名] # 打开“路径”下“文件名”文件</span><br></pre></td></tr></table></figure><h5 id="less"><a href="#less" class="headerlink" title="less"></a>less</h5><p>如果你喜欢滚动查看的话，还可以使用less命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less [路径] [文件名] # 可以滚动查看</span><br></pre></td></tr></table></figure><p>使用Enter滚动页面，使用ｑ退出。<br>##　跟踪文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [文件名] # 跟踪文件</span><br></pre></td></tr></table></figure><p>官方文档中说这是跟踪文件。不过也可以理解为将工作区中的问价提交到缓存区。但是本质上还是略有不同的。不过刚接触时可以这么理解，用多了就知道跟踪文件是什么意思了。</p><h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><h3 id="复杂好理解版本"><a href="#复杂好理解版本" class="headerlink" title="复杂好理解版本"></a>复杂好理解版本</h3><p>将缓存区的文件提交到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit [文件名] # 提交文件</span><br></pre></td></tr></table></figure><p>这样提交之后需要编辑提交内容的文件，每次都这么弄的话就很麻烦。</p><h3 id="简洁难理解版本"><a href="#简洁难理解版本" class="headerlink" title="简洁难理解版本"></a>简洁难理解版本</h3><p>在提交文件的时候同时提交描述，超级简洁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述&quot;　[文件名] # 提交文件</span><br></pre></td></tr></table></figure><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><p>查看跟踪文件的状态，即它在缓存区还是已经提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status # 查看状态</span><br></pre></td></tr></table></figure><p>PS：当文件在缓存区、提交后、第二次修改后、第二次提交后的状态都是不一样的，可以自己试一试。</p><h2 id="删除缓存文件"><a href="#删除缓存文件" class="headerlink" title="删除缓存文件"></a>删除缓存文件</h2><p>在缓存区的文件需要删除的话，可以用rm命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached [文件名] # 删除缓存区文件</span><br></pre></td></tr></table></figure><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>rm可以理解为remove，也是Linux中的常用命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [路径] [文件名]　# 删除文件</span><br></pre></td></tr></table></figure><p>PS：臭名昭著的删库跑路命令是　rm -rf</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>查看git的所有操作日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log # 直接查看日志</span><br><span class="line">git log --pretty&#x3D;oneline # 用漂亮模式中的一行显示</span><br><span class="line">git log --oneline # 用一行显示</span><br><span class="line">git reflog # 另一种方法</span><br></pre></td></tr></table></figure><p>这几种方法各有利弊，而且也各有不同的应用时机，自己尝试一下就知道有什么区别了。</p><h2 id="版本更改"><a href="#版本更改" class="headerlink" title="版本更改"></a>版本更改</h2><p>版本可以前进和后退，这是Git最核心的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [指针] # 选择版本</span><br></pre></td></tr></table></figure><p>查看日志之后就会发现每行最前面都会有哈希值或者哈希值的前几位，这个东西就是每个版本的指针。通过指定不同的指针就可以实现版本的更改。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>有时候需要进行文件的删除，这时候就需要如下的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [文件名]　#　删除文件</span><br></pre></td></tr></table></figure><p>此时删除的文件是工作区的文件。接下来的操作就和提交到缓存区和本地仓库的命令一样了。由此可见，为什么git add操作叫做跟踪文件了。</p><h2 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff [文件名]　# 比较缓存区文件</span><br><span class="line">git diff HEAD [文件名]　# 和本地仓库中的文件进行比较</span><br><span class="line">git diff HEAD #　比较所有文件的差异</span><br></pre></td></tr></table></figure><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名] #　创建分支</span><br><span class="line">git branch -v # 查看所有分支</span><br><span class="line">git checkout [分支名] # 切换分支</span><br><span class="line">git merge [被合并分支名]　# 合并分支 </span><br><span class="line">git commit # 冲突分支提交</span><br></pre></td></tr></table></figure><p>在合并分支的时候可能会存在冲突的问题。这个是时候需要手动修改内容，然后再提交</p><h2 id="远程库推送"><a href="#远程库推送" class="headerlink" title="远程库推送"></a>远程库推送</h2><p>在使用远程库的时候需要一些基本的设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add [别名] [远程库地址] # 设置远程库地址别名</span><br><span class="line">git remote -v # 显示别名</span><br><span class="line">git push [别名] [分支] # 提交到远程库</span><br></pre></td></tr></table></figure><p>向远程库提交的时候需要输入账号和密码。<br>PS：只要我们远程库地址设置的时候区分好，就可以向不同的托管平台提交代码。</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>这个命令除了克隆源码到本地之外，还有一个用处就是下载源码。有点废话，但却是思路的转换。有时候Github的东西下载速度太慢，于是就用这个克隆命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程库地址] # 克隆远程库</span><br></pre></td></tr></table></figure><p>在克隆的时候，最好新建个文件夹。克隆之后，文件夹就已经初始化好了，而且仓库别名也是和远程仓库的一致。</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>创建文件夹的命令，是make directory的缩写，使用如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [文件件名] # 创建文件夹</span><br></pre></td></tr></table></figure><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>因为不知道怎么翻译，所以就直接以这个命令的名字作为这一节的名字吧。就是把远程库的文件弄下来然后和本地库的文件merge一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公式：pull &#x3D; fetch + merge</span><br><span class="line">git fetch [远程库别名] [分支名]　# 下载远程库文件到本地</span><br><span class="line">git merge [远程库别名&#x2F;分支名]　# 将远程库的文件和本地的文件融合</span><br><span class="line">git pull [远程库别名] [分支名] #　前两个命令的融合版本</span><br></pre></td></tr></table></figure><p>PS：建议使用fetch和merge，因为这样可以先不修改本地文件，可以先看看远程的文件是什么，会不会有冲突，如果有冲突怎么解决，这些都是有必要的。但是如果直接pull的话就没办法做到上述操作了。所以用的时候分情况讨论。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>基本的Git操作就是这些，如果还需要详细的内容可以去<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>查看相关的文档。再给大家推荐一个网站，是托管在Github上的一个Git交互式学习界面，<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git Branching</a>。这个学习网站我自己也用，效果确实不错，具体的图示和答案都有。一图胜千言，可以具体形象的学习Git的相关操作。</p><p>完结撒花</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Git是一个版本控制脚本，基本命令和Linux中有很多都是重复的，至少逻辑上是这样。我这个半吊子Linux用户用起来很享受，尤其是用git clone源码，超级快。所以就做一个基本的介绍。只介绍干货，开箱即用。当然，会介绍一些Linux的相关命令。这样只看这篇介绍也可以知道git是怎么运行的。更多的内容可以参看Linux常用命令和Git的文档。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>NexT</title>
    <link href="http://yoursite.com/2020/01/30/NexT/"/>
    <id>http://yoursite.com/2020/01/30/NexT/</id>
    <published>2020-01-30T07:30:21.000Z</published>
    <updated>2020-01-30T07:52:57.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>NexT是一个比较流行的主题，基于Hexo。由于我现在用的就是NexT，所以做一个简单的介绍。因为官方文档写的已经很明确了，只有一些点是有问题的，所以只需要把官方的坑填上就可以了。更多的美化只要Google就可以了。如果相关的坑还是存在的话，届时再更新相关的问题。</p><a id="more"></a><h1 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h1><p>看<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>的文档就可以了。但是有几个坑还是要强调一下，因为文档就是错的。</p><h2 id="标签图标"><a href="#标签图标" class="headerlink" title="标签图标"></a>标签图标</h2><p>效果如图</p><p><img src="/2020/01/30/NexT/logo.png" alt="logo"></p><h2 id="menu设置"><a href="#menu设置" class="headerlink" title="menu设置"></a>menu设置</h2><p>所有的方框内都是没有空格的！！！<br>所有的方框内都是没有空格的！！！<br>所有的方框内都是没有空格的！！！<br>这个位置文档错了。</p><p><img src="/2020/01/30/NexT/menu.png" alt="menu"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>文档中我没有提到的内容应该都是没有问题的。祝大家写博客快乐～剩下的美化内容按需自取。</p><p>PS：美化这个东西，从IOS7越狱我就开始弄，Windows到Linux，我感觉用处不大，弄一点就ok了，如果有时间且有兴趣的话还是可以慢慢玩玩的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;NexT是一个比较流行的主题，基于Hexo。由于我现在用的就是NexT，所以做一个简单的介绍。因为官方文档写的已经很明确了，只有一些点是有问题的，所以只需要把官方的坑填上就可以了。更多的美化只要Google就可以了。如果相关的坑还是存在的话，届时再更新相关的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用搭建好的环境写第一篇博客</title>
    <link href="http://yoursite.com/2020/01/29/%E7%94%A8%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%86%99%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/01/29/%E7%94%A8%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%86%99%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-01-29T10:41:37.000Z</published>
    <updated>2020-01-29T12:10:53.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客的基本框架已经完成了，接下来就是一些细节问题了。之所以把这些细节单列出来，是因为官方文档中有一些问题。我已经踩完这些坑了，不希望大家再踩坑。只要按照我写的基本框架来，基本就不会出现问题了。</p><a id="more"></a><h1 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h1><ol><li>把_config.yml里面的post_asset_folder: 设置为true，默认是false，即<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></li><li>在安装hexo的目录下输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;7ym0n&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure>安装github的插件就可以顺利的插入图片了，用markdown语法的相对路径就可以了<h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1>使用命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;博客的名称&quot;</span><br></pre></td></tr></table></figure>这样在_post文件夹下面就会出现一个.md文件和相同名称的文件夹，把想要引用的图片放入文件夹中，用markdown的相应命令”相对路径”引用即可<h1 id="Readmore"><a href="#Readmore" class="headerlink" title="Readmore"></a>Readmore</h1>readmore就是一个简介，即在页面上不会显示出博文的全部，只会显示一个摘要，而且这个摘要还是可以自己设置的，语法如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>以这篇博文为例</li></ol><p><img src="/2020/01/29/%E7%94%A8%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%86%99%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/readmore.png" alt="readmore"><br>用上面的命令将前言和正文部分分割开</p><h1 id="生成页面和本地测试"><a href="#生成页面和本地测试" class="headerlink" title="生成页面和本地测试"></a>生成页面和本地测试</h1><p>用下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成页面</span><br><span class="line">hexo s # 本地测试</span><br></pre></td></tr></table></figure><p>如果本地测试的页面没有变，用下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除缓存</span><br></pre></td></tr></table></figure><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><p>用之前提到的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d # 部署到Github</span><br></pre></td></tr></table></figure><p>建议在每次本地测试之前清除缓存，然后在本地测试，测试之后再部署到Github。</p><p>如果不在本地测试的话，可以用下面的命令一步到位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>都设置完之后就可以开始写博客了。只要一步一步弄还是很简单的。接下来就是一些进阶的设置了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;博客的基本框架已经完成了，接下来就是一些细节问题了。之所以把这些细节单列出来，是因为官方文档中有一些问题。我已经踩完这些坑了，不希望大家再踩坑。只要按照我写的基本框架来，基本就不会出现问题了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>利用Github和Hexo搭建博客（Hexo部分）</title>
    <link href="http://yoursite.com/2020/01/25/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Hexo%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2020/01/25/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Hexo%E9%83%A8%E5%88%86%EF%BC%89/</id>
    <published>2020-01-25T12:48:46.460Z</published>
    <updated>2020-01-29T12:04:14.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>书接上回，Github部分已经设置好了，接下来就是Hexo了。Hexo就是个框架，可以简单理解为是一个软件。之所以用Hexo，是因为Hexo可以把markdown文件直接转换为html，这样网页就直接渲染好了，对于我这种只会markdown的人就很友好了。</p><a id="more"></a><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>Hexo是基于nodejs的，所以我们需要先安装nodejs。由于我是Manjaro Linux，所以用命令行直接安装就ok。Windows和Mac可以参照<a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js中文网</a>看文档安装就好。Mac应该也用命令行安装。</p><p>PS：学开源的内容一定要学会看文档，例如Python。<br>PS：Hexo的文档有一些错误，我会在内容中指出来。如果按照文档做了却没成功，那可能是官方文档出现了问题，再google一下就好了，不要怀疑自己。</p><h1 id="npm更换源"><a href="#npm更换源" class="headerlink" title="npm更换源"></a>npm更换源</h1><p>为什么要更换呢？太慢！所以在国内一定要更换源。更换源可以临时更换或者永久更换。我的建议是永久更换为国内的源，用国内的镜像，安装起来就很快了。</p><h2 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -gd express --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="永久设置"><a href="#永久设置" class="headerlink" title="永久设置"></a>永久设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>PS：这里有个彩蛋，不知道大家发现没有<br>PSS:这是阿里的源</p><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>使用npm直接安装。Mac和其他linux发行版需要superuser权限，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-client</span><br></pre></td></tr></table></figure><p>如果没更换源，安装速度就很慢。更换之后就稍微快一点。</p><h1 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h1><p>初始化命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>PS：从这里开始运行的所有命令都要在Hexo的目录下，这一点一定要注意。我每次的cd命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;Document&#x2F;blog</span><br></pre></td></tr></table></figure><p>也就是说，我的Hexo在Document文件夹中的blog内</p><h1 id="Hexo测试和部署"><a href="#Hexo测试和部署" class="headerlink" title="Hexo测试和部署"></a>Hexo测试和部署</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>依次输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成页面</span><br><span class="line">hexo s # 本地预览</span><br></pre></td></tr></table></figure><p>访问Terminal中出现的页面，如果出现Hexo的默认页面，则安装成功，具体的页面如图<br><img src="/2020/01/25/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Hexo%E9%83%A8%E5%88%86%EF%BC%89/localhost.jpg" alt="local"><br>PS：这里的页面主题是可以更换的，最常用的主题是NexT，我现在用的也是这个。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>此处需要安装插件 hexo-deployer-git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-deployer --save</span><br></pre></td></tr></table></figure><p>然后修改_config.yml文件。这个文件的位置在Hexo安装的目录下。因为我Hexo安装在 ～/Document/blog下，所以_config.yml也在这里。修改文件最后的Deployment部分，修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存之后，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d # 部署到Github</span><br></pre></td></tr></table></figure><p>就可以在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;用户名.github.io</span><br></pre></td></tr></table></figure><p>中看到通过Hexo搭建的博客了<br>PS：_config.yml是一个配置文件，是主页的配置。在设置主题之后，还会在主题的文件夹下出现同名文件。那个文件就是配置主题用的了。二者不要弄混。</p><h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>Hexo的搭建到现在也已经基本完成了。骨架已经部署好了。也就意味着我们可以开始写博客了。但是，还有一下细节需要处理，而且这些细节往往也是最花时间，官方文档也有错误。所以下面会专门写关于写博客的一些设置。最后还有一个NexT的主题设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;书接上回，Github部分已经设置好了，接下来就是Hexo了。Hexo就是个框架，可以简单理解为是一个软件。之所以用Hexo，是因为Hexo可以把markdown文件直接转换为html，这样网页就直接渲染好了，对于我这种只会markdown的人就很友好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Deployment" scheme="http://yoursite.com/tags/Deployment/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用Github和Hexo搭建博客（Github部分）</title>
    <link href="http://yoursite.com/2020/01/24/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2020/01/24/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github%E9%83%A8%E5%88%86%EF%BC%89/</id>
    <published>2020-01-24T14:07:24.000Z</published>
    <updated>2020-01-29T12:04:06.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github是个好东西。本质上是一个代码托管平台，里面有private和public两种。只要学会搜索和使用，就会发现很多宝藏。最近刚刚用Github和Hexo搭建好自己的博客，于是就写一个教程。比较简单的就直接省略，因为前人的教程已经很详细了。这里主要记录一下自己踩过的坑。</p><a id="more"></a><h1 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h1><p>由于我使用的是Manjaro Linux，所以一切都是基于Manjaro Linux的。Windows和Mac的用户可能不是很适合看这个教程。但是一些基本的过程都是相同的，所以也有一定的借鉴意义。</p><h1 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h1><p>在Github的官方网站注册就可以了。而且很多类似的托管都可以，譬如gitee。只要按照要求注册就可以。由于我注册很早，也可能不太适合现在借鉴，所以就不截图了。只要按照注册的要求做就可以了。</p><h1 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h1><p>创建名字如下的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure><p>我的用户名是BoogalooLi，所以我要创建的仓库名字为</p><p><a href="https://BoogalooLi.github.io" target="_blank" rel="noopener">BoogalooLi.github.io</a></p><p>这里只要直接点击就会进入我的个人网页。</p><p>PS：这个部分有没有readme都可以，但是最好有readme，这样大家就都知道这个是干什么的了。<br>PSS：readme的文件类型是markdown（md），这就是另一个故事了。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>安装Git和nodejs。由于Manjaro Linux已经预先装好具体方法一搜一片，而且这篇文章的重点介绍也不在这里，所以这里也省略了。假设我需要安装Git，那么代码如下</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman install git</span><br></pre></td></tr></table></figure><p>如果使用的是其他linux发行版，只要换一下相应的包管理命令即可。</p><h1 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h1><p>这里就比较技术向了。设置github账户和邮箱。</p><p>PS：Windows需要用之前安装好的git bash，mac、linux直接terminal就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p>我的命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name BoogalooLi</span><br><span class="line">git config --global user.email fz20111018@gmail.com</span><br></pre></td></tr></table></figure><h1 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h1><p>输入如下命令，回车就ok了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p>我就需要输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C fz20111018@gmail.com</span><br></pre></td></tr></table></figure><p>此时在～（/home/li）中就会出现.ssh文件（这里可能要显示“隐藏文件”，具体问度娘）。</p><p><img src="/2020/01/24/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github%E9%83%A8%E5%88%86%EF%BC%89/sshdir.jpg" alt="ssh_dir"></p><p>直接用文本应用打开名字为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_rsa.pub</span><br></pre></td></tr></table></figure><p>的文件，全选里面的内容，复制到剪切板。</p><p><img src="/2020/01/24/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github%E9%83%A8%E5%88%86%EF%BC%89/id.jpg" alt="id"></p><h1 id="在Github中添加密钥"><a href="#在Github中添加密钥" class="headerlink" title="在Github中添加密钥"></a>在Github中添加密钥</h1><p>登录Github，点击自己的头像，选择settings。然后点击左边的SSH and GPG keys点击New SSH key。</p><p><img src="/2020/01/24/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github%E9%83%A8%E5%88%86%EF%BC%89/ssh2.jpg" alt="ssh2"><br>接着将之前复制的内容复制进去就可以了。</p><p><img src="/2020/01/24/%E5%88%A9%E7%94%A8Github%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Github%E9%83%A8%E5%88%86%EF%BC%89/SSH.jpg" alt="SSH"><br>都弄好之后就像上面的图片一样，会显示出现在的keys。</p><h1 id="验证连接"><a href="#验证连接" class="headerlink" title="验证连接"></a>验证连接</h1><p>PS:这个地方我踩了坑，以为是和自己的帐号或者邮箱验证，但是实际上适合github验证。输入下面的代码后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure><p>这个时候一定要输入yes，然后回车就可以了。直到出现<br>successfully的字样就成功了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这个时候我们的github部分的相关设置就完成了。接下来我会在下一个部分分享Hexo的设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Github是个好东西。本质上是一个代码托管平台，里面有private和public两种。只要学会搜索和使用，就会发现很多宝藏。最近刚刚用Github和Hexo搭建好自己的博客，于是就写一个教程。比较简单的就直接省略，因为前人的教程已经很详细了。这里主要记录一下自己踩过的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Deployment" scheme="http://yoursite.com/tags/Deployment/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/22/hello-world/"/>
    <id>http://yoursite.com/2020/01/22/hello-world/</id>
    <published>2020-01-22T13:17:15.130Z</published>
    <updated>2020-01-23T04:55:17.478Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Deployment" scheme="http://yoursite.com/tags/Deployment/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
</feed>
